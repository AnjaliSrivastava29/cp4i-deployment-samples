apiVersion: v1
kind: ServiceAccount
metadata:
  name: cicd-el

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: cicd-ace-sa
secrets:
  - name: cicd-ace
  - name: er-pull-secret

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: cicd-mq-sa
secrets:
  - name: cicd-mq
  - name: er-pull-secret

---

apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: git-source
spec:
  type: git
  params:
    - name: revision
      value: dent-deletion
    - name: url
      # value: https://github.com/IBM/cp4i-deployment-samples.git
      value: https://github.com/Kinshuk1993/cp4i-deployment-samples.git

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-push-ace-api-docker-image
spec:
  resources:
    inputs:
      - name: git-source
        type: git
  steps:
    - name: build-and-push-ace
      image: gcr.io/kaniko-project/executor:latest
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
      command:
        - /kaniko/executor
      args:
        - --context=/workspace/git-source/DrivewayDentDeletion/ace-api
        - --dockerfile=/workspace/git-source/DrivewayDentDeletion/ace-api/Dockerfile
        - --destination=image-registry.openshift-image-registry.svc:5000/ace/ace-ddd-api:latest-amd64
        - --verbosity=debug
        - --log-timestamp
        - --skip-tls-verify
      securityContext:
        runAsUser: 0

---

apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: helm-deploy-task-ace-api
spec:
  steps:
  - args:
    - install
    - ibm-ace-server-icp4i-prod
    - --debug
    - -n
    - ace-server-icp4i-prod
    - --namespace
    - ace
    - --repo
    - https://raw.githubusercontent.com/IBM/charts/master/repo/entitled/
    - --set
    - image.aceonly=image-registry.openshift-image-registry.svc:5000/ace/ace-ddd-api:latest,image.pullPolicy=Always,license=accept,aceonly.replicaCount=1,integrationServer.configurationSecret=ace-ddd-dev-creds
    - --generate-name
    image: alpine/helm
    env:
      - name: KUBECONFIG
        value: /app/kubeconfig
      - name: HELM_TLS_CA_CERT
        valueFrom:
          secretKeyRef:
            name: task-helm-tls
            key: ca
      - name: HELM_TLS_CERT
        valueFrom:
          secretKeyRef:
            name: task-helm-tls
            key: cert
      - name: HELM_TLS_KEY
        valueFrom:
          secretKeyRef:
            name: task-helm-tls
            key: key
    volumeMounts:
     - name: kubeconfig
       mountPath: /app  
    name: helm-deploy
    resources: {}
    securityContext:
      runAsUser: 0
  volumes:
    - name: kubeconfig
      secret:
        secretName: cluster-kubeconfig

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-push-mq-docker-image
spec:
  resources:
    inputs:
      - name: git-source
        type: git
  steps:
    - name: build-and-push-mq
      image: gcr.io/kaniko-project/executor:latest
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
      command:
        - /kaniko/executor
      args:
        - --context=/workspace/git-source/DrivewayDentDeletion/mq
        - --dockerfile=/workspace/git-source/DrivewayDentDeletion/mq/Dockerfile
        - --destination=image-registry.openshift-image-registry.svc:5000/mq/mq-ddd:latest-amd64
        - --verbosity=debug
        - --log-timestamp
        - --skip-tls-verify
      securityContext:
        runAsUser: 0

---

apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: helm-deploy-task-mq
spec:
  steps:
  - args:
    - install
    - ibm-mqadvanced-server-integration-prod
    - --debug
    - -n
    - mq-icp4i-prod
    - --namespace
    - mq
    - --repo
    - https://raw.githubusercontent.com/IBM/charts/master/repo/entitled/
    - --set
    - image.repository=image-registry.openshift-image-registry.svc:5000/mq/mq-ddd,image.tag=latest,image.pullPolicy=Always,license=accept,image.pullSecret=cicd-mq,qmPVC.enabled=false,logPVC.enabled=false,tls.hostname=,trace.strmqm=false,queueManager.multiInstance=false,odTracingConfig.enabled=false,odTracingConfig.odTracingNamespace=tracing
    - --generate-name
    image: alpine/helm
    env:
      - name: KUBECONFIG
        value: /app/kubeconfig
      - name: HELM_TLS_CA_CERT
        valueFrom:
          secretKeyRef:
            name: task-helm-tls
            key: ca
      - name: HELM_TLS_CERT
        valueFrom:
          secretKeyRef:
            name: task-helm-tls
            key: cert
      - name: HELM_TLS_KEY
        valueFrom:
          secretKeyRef:
            name: task-helm-tls
            key: key
    volumeMounts:
     - name: kubeconfig
       mountPath: /app
#      - name: configmap_mq
#        mountPath: /app 
    name: helm-deploy
    resources: {}
    securityContext:
      runAsUser: 0
  volumes:
    - name: kubeconfig
      secret:
        secretName: cluster-kubeconfig
#     - name: "$(params.volumeName)"
#       configMap:
#         name: "$(params.CFGNAME)"

---

apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: main-pipeline
spec:
  resources:
    - name: git-source
      type: git
  tasks:
    - name: ace-api-build
      taskRef:
        name: build-push-ace-api-docker-image
      resources:
        inputs:
          - name: git-source
            resource: git-source
    - name: mq-build
      taskRef:
        name: build-push-mq-docker-image
      resources:
        inputs:
          - name: git-source
            resource: git-source
    - name: ace-api-helm-deploy
      runAfter:
        - ace-api-build
      taskRef:
        name: helm-deploy-task-ace-api
    - name: mq-helm-deploy
      runAfter:
        - mq-build
      taskRef:
        name: helm-deploy-task-mq

---

apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: main-triggertemplate
spec:
  resourcetemplates:
  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineRun
    metadata:
      name: main-pipelinerun-$(uid)
    spec:
      pipelineRef:
        name: main-pipeline
      serviceAccountNames:
        - taskName: ace-api-run
          serviceAccountName: cicd-ace-sa
        - taskName: mq-api-run
          serviceAccountName: cicd-mq-sa
        - taskName: ace-api-helm-deploy
          serviceAccountName: cicd-ace-sa
      resources:
      - name: git-source
        resourceRef:
          name: git-source

---

apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: main-trigger
spec:
  serviceAccountName: cicd-el
  triggers:
  - template:
      name: main-triggertemplate

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-triggers-role
rules:
# Permissions for every EventListener deployment to function
- apiGroups: ["triggers.tekton.dev"]
  resources: ["eventlisteners", "triggerbindings", "triggertemplates"]
  verbs: ["get"]
- apiGroups: [""]
  # secrets are only needed for Github/Gitlab interceptors, serviceaccounts only for per trigger authorization
  resources: ["configmaps", "secrets", "serviceaccounts"]
  verbs: ["get", "list", "watch"]
# Permissions to create resources in associated TriggerTemplates
- apiGroups: ["tekton.dev"]
  resources: ["pipelineruns", "pipelineresources", "taskruns"]
  verbs: ["create"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tekton-triggers-rolebinding
subjects:
- kind: ServiceAccount
  name: cicd-el
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-triggers-role
