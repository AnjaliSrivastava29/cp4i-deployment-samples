apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: git-source
spec:
  type: git
  params:
    - name: revision
      value: "{{BRANCH}}"
    - name: url
      value: "{{FORKED_REPO}}"

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-push-mq-docker-image
spec:
  params:
    - name: imageTag
      type: string
      description: The image tag
  resources:
    inputs:
      - name: git-source
        type: git
  steps:
    - name: build-and-push-mq
      image: gcr.io/kaniko-project/executor:latest
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
      command:
        - /kaniko/executor
      args:
        - --context=/workspace/git-source/DrivewayDentDeletion/Operators
        - --dockerfile=/workspace/git-source/DrivewayDentDeletion/Operators/Dockerfiles/MQ.Dockerfile
        - --destination=image-registry.openshift-image-registry.svc:5000/mq/mq-ddd:$(params.imageTag)
        - --verbosity=debug
        - --log-timestamp
        - --skip-tls-verify
        - --cleanup
      securityContext:
        runAsUser: 0

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-mq-task
spec:
  params:
    - name: imageTag
      type: string
      description: The image tag
    - name: imageName
      type: string
      description: The image name
    - name: releaseName
      type: string
      description: release name of queue manager deployment
  resources:
    inputs:
      - name: git-source
        type: git
  steps:
    - name: oc
      image: quay.io/openshift/origin-cli:latest
      script: "/workspace/git-source/DrivewayDentDeletion/Operators/Deploy-Scripts/mq.sh -n {{NAMESPACE}} -r $(params.releaseName) -i image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/$(params.imageName):$(params.imageTag)"

---

#Task to deploy ace-integration-server
# apiVersion: tekton.dev/v1beta1
# kind: Task
# metadata:
#   name: deploy-ace-int-server
# spec:
#   params:
#     - name: imageTag
#       type: string
#       description: The image tag
#     - name: imageName
#       type: string
#       description: The image name
#     - name: releaseName
#       type: string
#       description: release name of integration server deployment
#   resources:
#     inputs:
#       - name: git-source
#         type: git
#   steps:
#     - name: oc
#       image: quay.io/openshift/origin-cli:latest
#       script: "/workspace/git-source/DrivewayDentDeletion/Operators/Deploy-Scripts/ace.sh -n {{NAMESPACE}} -r $(params.releaseName) -e image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/$(params.imageName):$(params.imageTag)"

# ---

apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: main-pipeline
spec:
  params:
    - name: imageTag
      type: string
      description: The image tag
  resources:
    - name: git-source
      type: git
  tasks:
    - name: build-mq
      taskRef:
        name: build-push-mq-docker-image
      params:
        - name: imageTag
          value: "$(params.imageTag)"
      resources:
        inputs:
          - name: git-source
            resource: git-source
    - name: deploy-mq
      runAfter:
        - build-mq
      taskRef:
        name: deploy-mq-task
      params:
        - name: imageTag
          value: "$(params.imageTag)"
        - name: imageName
          value: "mq-ddd"
        - name: releaseName
          value: "mq-ddd-qm"
      resources:
        inputs:
          - name: git-source
            resource: git-source
    # - name: deploy-ace-int-server-ace-api
    #   taskRef:
    #     name: deploy-ace-int-server
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-api"
    #     - name: releaseName
    #       value: "ace-api-int-srv"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: deploy-ace-int-server-ace-bernie
    #   taskRef:
    #     name: deploy-ace-int-server
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-bernie"
    #     - name: releaseName
    #       value: "ace-bernie-int-srv"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: deploy-ace-int-server-ace-acme
    #   taskRef:
    #     name: deploy-ace-int-server
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-acme"
    #     - name: releaseName
    #       value: "ace-acme-int-srv"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: deploy-ace-int-server-ace-chris
    #   taskRef:
    #     name: deploy-ace-int-server
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-chris"
    #     - name: releaseName
    #       value: "ace-chris-int-srv"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source

---

apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: main-triggertemplate
spec:
  resourcetemplates:
  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineRun
    metadata:
      name: main-pipelinerun-$(uid)
    spec:
      pipelineRef:
        name: main-pipeline
      serviceAccountNames:
        # - taskName: deploy-ace-int-server-ace-api
        #   serviceAccountName: cicd-pipeline
        # - taskName: deploy-ace-int-server-ace-chris
        #   serviceAccountName: cicd-pipeline
        # - taskName: deploy-ace-int-server-ace-acme
        #   serviceAccountName: cicd-pipeline
        # - taskName: deploy-ace-int-server-ace-bernie
        #   serviceAccountName: cicd-pipeline
        - taskName: build-mq
          serviceAccountName: cicd-pipeline
        - taskName: deploy-mq
          serviceAccountName: cicd-pipeline
      resources:
      - name: git-source
        resourceRef:
          name: git-source
      params:
      - name: imageTag
        value: $(uid)

---

apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: main-trigger
spec:
  serviceAccountName: cicd-el
  triggers:
  - template:
      name: main-triggertemplate

---

apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app.kubernetes.io/managed-by: EventListener
    app.kubernetes.io/part-of: Triggers
    eventlistener: main-trigger
  name: el-main-trigger
spec:
  host: ""
  port:
    targetPort: http-listener
  to:
    kind: ""
    name: el-main-trigger
    weight: 0

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-triggers-role
rules:
- apiGroups: ["triggers.tekton.dev"]
  resources: ["eventlisteners", "triggerbindings", "triggertemplates"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["configmaps", "secrets", "serviceaccounts"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["tekton.dev"]
  resources: ["pipelineruns", "pipelineresources", "taskruns"]
  verbs: ["create"]
- apiGroups: ["appconnect.ibm.com"]
  resources: ["designerauthorings", "dashboards", "switchservers", "configurations", "integrationservers"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: cicd-pipeline
secrets:
  - name: ibm-entitlement-key

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tekton-triggers-rolebinding
subjects:
- kind: ServiceAccount
  name: cicd-pipeline
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-triggers-role
