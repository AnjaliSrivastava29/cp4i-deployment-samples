apiVersion: v1
kind: ServiceAccount
metadata:
  name: cicd-pipeline
secrets:
  - name: er-pull-secret
  - name: cicd-{{NAMESPACE}}
# er-pull-secret used to pull images from ER in Dockerfiles
# As this is a single namespace deployment we don't need multiple service accounts for every product

---

apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: git-source
spec:
  type: git
  params:
    - name: revision
      value: "{{BRANCH}}"
    - name: url
      value: "{{FORKED_REPO}}"

---

# apiVersion: tekton.dev/v1alpha1
# kind: Task
# metadata:
#   name: buildah
# spec:
#   inputs:
#     params:
#     - description: Path to the Dockerfile to build.
#       name: DOCKERFILE
#       type: string
#     - description: Output docker image
#       name: image
#       type: string
#     - description: Image tag
#       name: imageTag
#       type: string
#     resources:
#     - name: git-source
#       type: git
#   steps:
#     - command:
#         - buildah
#         - bud
#         - '--tls-verify=false'
#         - '--layers'
#         - '-f'
#         - '/workspace/git-source/DrivewayDentDeletion/Operators/Dockerfiles/$(inputs.params.DOCKERFILE)'
#         - '-t'
#         - '$(inputs.params.image):$(inputs.params.imageTag)'
#         - '/workspace/git-source/DrivewayDentDeletion/Operators/Dockerfiles'
#       image: quay.io/buildah/stable:v1.15.0
#       name: build
#       securityContext:
#         privileged: true
#       workingDir: /workspace/git-source
      

#     - name: build
#       image: quay.io/buildah/stable
#       securityContext:
#         runAsUser: 0
#         privileged: true
#       command:
#         - sh
#         - -c
#         - "cd /workspace/git-source/DrivewayDentDeletion/Operators/Dockerfiles && \
#            buildah --storage-driver=vfs build-using-dockerfile -f /workspace/git-source/DrivewayDentDeletion/Operators/Dockerfiles/MQ.Dockerfile -t $(params.imageTag) . && \           
#            buildah --storage-driver=vfs push --tls-verify=false --creds=anyone:$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) $(params.imageTag) image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/mq-ddd
#           "
# ---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-push-mq-docker-image
spec:
  params:
    - name: imageTag
      type: string
      description: The image tag
  resources:
    inputs:
      - name: git-source
        type: git
  steps:
    - name: build
      image: quay.io/buildah/stable
      securityContext:
        runAsUser: 0
        privileged: true
      command:
        - sh
        - -c
        - "cd /workspace/git-source/DrivewayDentDeletion/Operators/Dockerfiles && \
           buildah --storage-driver=vfs build-using-dockerfile -f /workspace/git-source/DrivewayDentDeletion/Operators/Dockerfiles/MQ.Dockerfile -t image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/mq-ddd:$(params.imageTag) . && \           
           buildah --storage-driver=vfs push --tls-verify=false image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/mq-ddd:$(params.imageTag)
          "

---

# apiVersion: tekton.dev/v1beta1
# kind: Task
# metadata:
#   name: deploy-mq-task
# spec:
#   params:
#     - name: imageTag
#       type: string
#       description: The image tag
#     - name: imageName
#       type: string
#       description: The image name
#     - name: releaseName
#       type: string
#       description: release name of queue manager deployment
#   resources:
#     inputs:
#       - name: git-source
#         type: git
#   steps:
#     - name: oc
#       image: quay.io/openshift/origin-cli:latest
#       script: "/workspace/git-source/products/bash/release-mq.sh -n {{NAMESPACE}} -r $(params.releaseName) -i image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/$(params.imageName):$(params.imageTag)"

# ---

# apiVersion: tekton.dev/v1beta1
# kind: Task
# metadata:
#   name: build-push-ace-is-docker-images
# spec:
#   params:
#     - name: imageTag
#       type: string
#       description: The image tag
#     - name: imageName
#       type: string
#       description: The image name
#     - name: dockerFile
#       type: string
#       description: Name of the dockerfile
#     - name: contextPath
#       type: string
#       description: dockerfile context 
#   resources:
#     inputs:
#       - name: git-source
#         type: git
#   steps:
#     - name: build-and-push-ace-is
#       image: gcr.io/kaniko-project/executor:latest
#       env:
#         - name: "DOCKER_CONFIG"
#           value: "/tekton/home/.docker/"
#       command:
#         - /kaniko/executor
#       args:
#         - --context=/workspace/git-source/DrivewayDentDeletion/Bar_files/$(params.contextPath)
#         - --dockerfile=/workspace/git-source/DrivewayDentDeletion/Operators/Dockerfiles/$(params.dockerFile)
#         - --destination=image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/$(params.imageName):$(params.imageTag)
#         - --verbosity=debug
#         - --log-timestamp
#         - --skip-tls-verify
#         - --cleanup
#       securityContext:
#         runAsUser: 0

# ---

# #Task to deploy ace-integration-server
# apiVersion: tekton.dev/v1beta1
# kind: Task
# metadata:
#   name: deploy-ace-int-server
# spec:
#   params:
#     - name: imageTag
#       type: string
#       description: The image tag
#     - name: imageName
#       type: string
#       description: The image name
#     - name: releasename
#       type: string
#       description: release name of integration server deployment
#   resources:
#     inputs:
#       - name: git-source
#         type: git
#   steps:
#     - name: oc
#       image: quay.io/openshift/origin-cli:latest
#       script: "/workspace/git-source/products/bash/release-ace-integration-server.sh -n {{NAMESPACE}} -r $(params.releasename) -e image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/$(params.imageName):$(params.imageTag)"

# ---

apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: main-pipeline
spec:
  params:
    - name: imageTag
      type: string
      description: The image tag
  resources:
    - name: git-source
      type: git
  tasks:
    - name: build-mq
      taskRef:
        name: build-push-mq-docker-image
        # name: buildah
      params:
        - name: imageTag
          value: "$(params.imageTag)"
        # - name: DOCKERFILE
        #   value: "MQ.Dockerfile"
        # - name: image
        #   value: "image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/mq-ddd"
      resources:
        inputs:
          - name: git-source
            resource: git-source
    # - name: deploy-mq
    #   runAfter:
    #     - build-mq
    #   taskRef:
    #     name: deploy-mq-task
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "mq-ddd"
    #     - name: releaseName
    #       value: "mq-ddd-qm"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: build-ace-int-server-ace-api
    #   taskRef:
    #     name: build-push-ace-is-docker-images
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-api"
    #     - name: dockerFile
    #       value: "ACE-API.Dockerfile"
    #     - name: contextPath
    #       value: "ace-api"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: build-ace-int-server-ace-acme
    #   taskRef:
    #     name: build-push-ace-is-docker-images
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-acme"
    #     - name: dockerFile
    #       value: "ACE-Acme.Dockerfile"
    #     - name: contextPath
    #       value: "ace-acme"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: build-ace-int-server-ace-bernie
    #   taskRef:
    #     name: build-push-ace-is-docker-images
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-bernie"
    #     - name: dockerFile
    #       value: "ACE-Bernie.Dockerfile"
    #     - name: contextPath
    #       value: "ace-bernie"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: build-ace-int-server-ace-chris
    #   taskRef:
    #     name: build-push-ace-is-docker-images
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-chris"
    #     - name: dockerFile
    #       value: "ACE-Chris.Dockerfile"
    #     - name: contextPath
    #       value: "ace-chris"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: deploy-ace-int-server-ace-api
    #   runAfter:
    #     - build-ace-int-server-ace-api
    #   taskRef:
    #     name: deploy-ace-int-server
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-api"
    #     - name: releasename
    #       value: "ace-api-int-srv"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: deploy-ace-int-server-ace-bernie
    #   runAfter:
    #     - build-ace-int-server-ace-bernie
    #   taskRef:
    #     name: deploy-ace-int-server
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-bernie"
    #     - name: releasename
    #       value: "ace-bernie-int-srv"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: deploy-ace-int-server-ace-acme
    #   runAfter:
    #     - build-ace-int-server-ace-acme
    #   taskRef:
    #     name: deploy-ace-int-server
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-acme"
    #     - name: releasename
    #       value: "ace-acme-int-srv"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: deploy-ace-int-server-ace-chris
    #   runAfter:
    #     - build-ace-int-server-ace-chris
    #   taskRef:
    #     name: deploy-ace-int-server
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-chris"
    #     - name: releasename
    #       value: "ace-chris-int-srv"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source

---

apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: main-triggertemplate
spec:
  resourcetemplates:
  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineRun
    metadata:
      name: main-pipelinerun-$(uid)
    spec:
      pipelineRef:
        name: main-pipeline
      serviceAccountNames:
        - taskName: build-mq
          serviceAccountName: cicd-mq-sa
        # - taskName: deploy-mq
        #   serviceAccountName: cicd-mq-sa
        # - taskName: build-ace-int-server-ace-api
        #   serviceAccountName: cicd-ace-sa
        # - taskName: build-ace-int-server-ace-bernie
        #   serviceAccountName: cicd-ace-sa
        # - taskName: build-ace-int-server-ace-acme
        #   serviceAccountName: cicd-ace-sa
        # - taskName: build-ace-int-server-ace-chris
        #   serviceAccountName: cicd-ace-sa
        # - taskName: deploy-ace-int-server-ace-api
        #   serviceAccountName: cicd-ace-sa
        # - taskName: deploy-ace-int-server-ace-chris
        #   serviceAccountName: cicd-ace-sa
        # - taskName: deploy-ace-int-server-ace-acme
        #   serviceAccountName: cicd-ace-sa
        # - taskName: deploy-ace-int-server-ace-bernie
        #   serviceAccountName: cicd-ace-sa
      resources:
      - name: git-source
        resourceRef:
          name: git-source
      params:
      - name: imageTag
        value: $(uid)

---

apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: main-trigger
spec:
  serviceAccountName: cicd-pipeline
  triggers:
  - template:
      name: main-triggertemplate

---

apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app.kubernetes.io/managed-by: EventListener
    app.kubernetes.io/part-of: Triggers
    eventlistener: main-trigger
  name: el-main-trigger
spec:
  host: ""
  port:
    targetPort: http-listener
  to:
    kind: ""
    name: el-main-trigger
    weight: null

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-triggers-role
rules:
# Permissions for every EventListener deployment to function
- apiGroups: ["triggers.tekton.dev"]
  resources: ["eventlisteners", "triggerbindings", "triggertemplates"]
  verbs: ["get"]
- apiGroups: [""]
# secrets are only needed for Github/Gitlab interceptors, serviceaccounts only for per trigger authorization
  resources: ["configmaps", "secrets", "serviceaccounts"]
  verbs: ["get", "list", "watch"]
# Permissions to create resources in associated TriggerTemplates
- apiGroups: ["tekton.dev"]
  resources: ["pipelineruns", "pipelineresources", "taskruns"]
  verbs: ["create"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tekton-triggers-rolebinding
subjects:
- kind: ServiceAccount
  name: cicd-pipeline
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-triggers-role

---

# Ace Integration Service account configuration
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ace-int-srv-role
rules:
# Permissions for appconnect integration server
- apiGroups: ["appconnect.ibm.com"]
  resources: ["designerauthorings", "dashboards", "switchservers", "configurations", "integrationservers"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: cicd-ace-sa
secrets:
  - name: er-pull-secret
  - name: cicd-{{NAMESPACE}}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ace-int-srv-rolebinding
subjects:
- kind: ServiceAccount
  name: cicd-ace-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ace-int-srv-role

---

# Ace Integration Service account configuration
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: mq-qm-role
rules:
# Permissions for appconnect integration server
- apiGroups: ["mq.ibm.com"]
  resources: ["queuemanagers", "queuemanagers/finalizers", "queuemanagers/status"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: cicd-mq-sa
secrets:
  - name: er-pull-secret
  - name: cicd-{{NAMESPACE}}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mq-rolebinding
subjects:
- kind: ServiceAccount
  name: cicd-mq-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: mq-qm-role
